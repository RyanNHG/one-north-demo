extends ../index.pug


block content

    section.hero.is-dark.is-bold.is-medium
        .hero-body
            .container
                h1.title.is-1= staticContent.title
                h2.subtitle.is-3= staticContent.subtitle

    .container(style={"padding": "20px"})
        p.control.has-icon.has-icon-right
            input.input.is-large(
                type="text"
                placeholder= staticContent.filterPlaceholder
                v-model="filterQuery"
                v-on:input="updateUrl($event.target.value)"
                )
            span.icon.is-medium
                i.fa.fa-search

        p.control.has-addons
            sort-button( label="First Name"
                         value="firstName"
                         v-bind:sort-options="sortOptions"
                         v-on:sort-by="sortBy" )
            sort-button( label="Last Name"
                         value="lastName"
                         v-bind:sort-options="sortOptions"
                         v-on:sort-by="sortBy" )
            sort-button( label="Title"
                         value="title"
                         v-bind:sort-options="sortOptions"
                         v-on:sort-by="sortBy" )
        hr

        ul
            developer-tile( v-for="dev in displayedDevelopers"
                            v-bind:developer="dev" )

    script(type="text/x-template" id="developerTileTemplate")
        include views/developer-tile.pug

    script(type="text/x-template" id="sortButtonTemplate")
        include views/sort-button.pug


block scripts
    script(type="text/javascript").

        var pugData = !{data};

        Vue.component('developerTile', {

            template: '#developerTileTemplate',

            props: ['developer'],

            computed: {

                fullName: function(){
                    return this.developer.firstName + ' ' + this.developer.lastName;
                }

            }

        });

        Vue.component('sortButton', {

            template: '#sortButtonTemplate',

            props: ['label', 'value', 'sortOptions'],

            computed: {

                iconClasses: function(){

                    if(this.sortOptions.value == this.value) {
                        return (this.sortOptions.ascending) ? 'fa fa-sort-alpha-asc' : 'fa fa-sort-alpha-desc'
                    } else {
                        return '';
                    }

                }

            },

            methods: {

                sortBy: function() {

                    this.$emit('sort-by', this.value);

                }

            }

        })

        var vm = new Vue({

            el: '#app',

            data: {
                developers: pugData.developers,
                filterQuery: pugData.filterQuery,
                sortOptions: {
                    value: 'firstName',
                    ascending: true
                }
            },

            computed: {

                displayedDevelopers: function() {

                    var developers = this.developers;

                    var filteredDevelopers =
                        developers.filter(this.filterDevelopers);

                    var filteredAndSortedDevelopers =
                        filteredDevelopers.sort(this.sortDevelopers);

                    return filteredAndSortedDevelopers;

                }

            },

            methods: {

                filterDevelopers: function(developer) {

                    var lowercaseName = this.getFullName(developer).toLowerCase();
                    var lowercaseQuery = this.filterQuery.toLowerCase();

                    return lowercaseName.indexOf(lowercaseQuery) > -1;

                },

                sortDevelopers: function(a, b) {

                    var LT = -1, GT = 1, EQ = 0;
                    var value = this.sortOptions.value,
                        ascending = this.sortOptions.ascending;

                    var aVal = a[value];
                    var bVal = b[value];

                    if(aVal < bVal)
                        return (ascending) ? LT : GT;
                    else if(aVal > bVal)
                        return (ascending) ? GT : LT;
                    else
                        return EQ;

                },

                updateUrl: function(value) {

                    if(value.length == 0) {

                        window.history.replaceState({}, 'Developers', '/developers');

                    } else {

                        window.history.replaceState({}, 'Developers', '/developers?search=' + value);

                    }

                },

                sortBy: function(value){

                    if (this.sortOptions.value == value) {
                        this.sortOptions.ascending = !this.sortOptions.ascending;
                    } else {
                        this.sortOptions = {
                            value: value,
                            ascending: true
                        }
                    }

                },

                getFullName: function(developer) {

                    return developer.firstName + ' ' + developer.lastName;

                }

            },

            created: function(){
                console.log('Received ' + this.developers.length + ' developers.');
            }

        });
